{"{\"assumptions\":{},\"sourceRoot\":\"D:\\\\Github Projects\\\\project-Eshan-Nayanapriya\\\\backend\\\\src\\\\tests\\\\security\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Github Projects\\\\project-Eshan-Nayanapriya\\\\backend\",\"filename\":\"D:\\\\Github Projects\\\\project-Eshan-Nayanapriya\\\\backend\\\\src\\\\tests\\\\security\\\\security.test.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"D:\\\\Github Projects\\\\project-Eshan-Nayanapriya\\\\backend\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.26.9:development":{"value":{"code":"import request from \"supertest\";\nimport UserModel from \"../../models/user.model.js\";\nimport app from \"../../../index.js\";\nimport { expect } from \"chai\";\nimport User from \"../../../models/userModel\"; // Assuming this is your user model\n\ndescribe(\"Security Tests\", () => {\n  // Test: Unauthorized Access\n  it(\"should return 401 for unauthorized access\", async () => {\n    const res = await request(app).get(\"/api/auth/login\") // a protected route\n    .set(\"Authorization\", \"Bearer invalid_token\");\n    expect(res.status).to.equal(401); // Fixed the assertion method\n  });\n\n  // Test: Role-based Access Control (RBAC)\n  it(\"should return 403 for user without admin role trying to access admin route\", async () => {\n    const token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YzkzNjNkZDIxZTJiMDRjZmJmYmM5YyIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzQxNjY0NDQ2LCJleHAiOjE3NDE2NjgwNDZ9.N7CX5jNTrcS4ZVQmrzXCkgDgs_K76uTPFuuXW97j-P4\"; // actual token for a non-admin user\n    const res = await request(app).get(\"/api/users/admin\") // Replace with an actual admin route\n    .set(\"Authorization\", `Bearer ${token}`);\n    expect(res.status).to.equal(403); // Fixed the assertion method\n  });\n\n  // Test: NoSQL Injection\n  it(\"should reject NoSQL injection in user input\", async () => {\n    const maliciousInput = \"' OR 1=1 --\"; // Example of a NoSQL injection\n    const res = await request(app).post(\"/api/auth/login\").send({\n      username: maliciousInput,\n      password: \"password\"\n    });\n    expect(res.status).to.not.equal(200); // Should not allow login with malicious input (fixed assertion)\n  });\n\n  // Test: Password Hashing (Ensure password is hashed, not plain text)\n  it(\"should hash the password before storing\", async () => {\n    const user = {\n      username: \"testuser\",\n      password: \"plaintextpassword\"\n    };\n    const res = await request(app).post(\"/api/auth/register\").send(user);\n\n    // Check if password is hashed (bcrypt)\n    const savedUser = await UserModel.findOne({\n      username: user.username\n    }); // Corrected to query the User model\n    expect(savedUser.password).to.not.equal(user.password); // Password should be hashed (fixed assertion)\n  });\n\n  // Test: Rate Limiting\n  it(\"should limit the number of requests\", async () => {\n    // Simulate multiple requests\n    for (let i = 0; i < 10; i++) {\n      await request(app).post(\"/api/auth/login\").send({\n        username: \"testuser\",\n        password: \"password\"\n      });\n    }\n    const res = await request(app).post(\"/api/auth/login\").send({\n      username: \"testuser\",\n      password: \"password\"\n    });\n    expect(res.status).to.equal(429); // Expect rate-limiting response (too many requests) (fixed assertion)\n  });\n\n  // Test: Security Headers\n  it(\"should include necessary security headers\", async () => {\n    const res = await request(app).get(\"/\");\n    expect(res.headers[\"x-content-type-options\"]).to.equal(\"nosniff\");\n    expect(res.headers[\"x-frame-options\"]).to.equal(\"DENY\");\n    expect(res.headers[\"strict-transport-security\"]).to.equal(\"max-age=31536000; includeSubDomains\");\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["request","UserModel","app","expect","User","describe","it","res","get","set","status","to","equal","token","maliciousInput","post","send","username","password","not","user","savedUser","findOne","i","headers"],"sourceRoot":"D:\\Github Projects\\project-Eshan-Nayanapriya\\backend\\src\\tests\\security\\","sources":["security.test.js"],"sourcesContent":["import request from \"supertest\";\r\nimport UserModel from \"../../models/user.model.js\";\r\nimport app from \"../../../index.js\";\r\nimport { expect } from \"chai\";\r\nimport User from \"../../../models/userModel\"; // Assuming this is your user model\r\n\r\ndescribe(\"Security Tests\", () => {\r\n  // Test: Unauthorized Access\r\n  it(\"should return 401 for unauthorized access\", async () => {\r\n    const res = await request(app)\r\n      .get(\"/api/auth/login\") // a protected route\r\n      .set(\"Authorization\", \"Bearer invalid_token\");\r\n\r\n    expect(res.status).to.equal(401); // Fixed the assertion method\r\n  });\r\n\r\n  // Test: Role-based Access Control (RBAC)\r\n  it(\"should return 403 for user without admin role trying to access admin route\", async () => {\r\n    const token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3YzkzNjNkZDIxZTJiMDRjZmJmYmM5YyIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzQxNjY0NDQ2LCJleHAiOjE3NDE2NjgwNDZ9.N7CX5jNTrcS4ZVQmrzXCkgDgs_K76uTPFuuXW97j-P4\"; // actual token for a non-admin user\r\n    const res = await request(app)\r\n      .get(\"/api/users/admin\") // Replace with an actual admin route\r\n      .set(\"Authorization\", `Bearer ${token}`);\r\n\r\n    expect(res.status).to.equal(403); // Fixed the assertion method\r\n  });\r\n\r\n  // Test: NoSQL Injection\r\n  it(\"should reject NoSQL injection in user input\", async () => {\r\n    const maliciousInput = \"' OR 1=1 --\"; // Example of a NoSQL injection\r\n    const res = await request(app)\r\n      .post(\"/api/auth/login\")\r\n      .send({ username: maliciousInput, password: \"password\" });\r\n\r\n    expect(res.status).to.not.equal(200); // Should not allow login with malicious input (fixed assertion)\r\n  });\r\n\r\n  // Test: Password Hashing (Ensure password is hashed, not plain text)\r\n  it(\"should hash the password before storing\", async () => {\r\n    const user = { username: \"testuser\", password: \"plaintextpassword\" };\r\n    const res = await request(app)\r\n      .post(\"/api/auth/register\")\r\n      .send(user);\r\n\r\n    // Check if password is hashed (bcrypt)\r\n    const savedUser = await UserModel.findOne({ username: user.username }); // Corrected to query the User model\r\n    expect(savedUser.password).to.not.equal(user.password); // Password should be hashed (fixed assertion)\r\n  });\r\n\r\n  // Test: Rate Limiting\r\n  it(\"should limit the number of requests\", async () => {\r\n    // Simulate multiple requests\r\n    for (let i = 0; i < 10; i++) {\r\n      await request(app)\r\n        .post(\"/api/auth/login\")\r\n        .send({ username: \"testuser\", password: \"password\" });\r\n    }\r\n\r\n    const res = await request(app)\r\n      .post(\"/api/auth/login\")\r\n      .send({ username: \"testuser\", password: \"password\" });\r\n\r\n    expect(res.status).to.equal(429); // Expect rate-limiting response (too many requests) (fixed assertion)\r\n  });\r\n\r\n  // Test: Security Headers\r\n  it(\"should include necessary security headers\", async () => {\r\n    const res = await request(app).get(\"/\");\r\n\r\n    expect(res.headers[\"x-content-type-options\"]).to.equal(\"nosniff\");\r\n    expect(res.headers[\"x-frame-options\"]).to.equal(\"DENY\");\r\n    expect(res.headers[\"strict-transport-security\"]).to.equal(\"max-age=31536000; includeSubDomains\");\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]}},"mtime":1741665128994}}